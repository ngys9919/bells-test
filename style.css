html {
    height: 100%;
    width: 100%;
  }
  
  .content-container {
    display: flex;
    /* by default: flex-direction is row; */
    /* flex-direction: row; */
    /* flex-direction: column; */
    /* flex-direction: row-reverse; */
    /* flex-direction: column-reverse; */
    align-items: flex-start;
    /* align-items: flex-end; */
    /* align-items: center; */
    /* align-items: stretch; */
    /* align-items: baseline; */
    /* justify-content: flex-start; */
    /* justify-content: flex-end; */
    /* justify-content: center; */
    /* justify-content: space-between; */
    /* justify-content: space-around; */
    justify-content: space-evenly;
    flex-wrap: wrap;
    row-gap: 10px;
    column-gap:10px;
    /* height: 100vh; */
    /* flex-basis controls the initial width of an element before align-      items is considered. */
  
    /* flex-growcontrols the proportion of width a flex item will have        once part of a flexbox. */
  }
  
  .item {
  border: 1px solid red;
  height: min-content;
  padding: 10px;
  }
  
  .box {
  height: 150px;
  width: 150px;
  border:1px solid black;
  background-color: yellow;
  }
  
  #main {
  height: 100vh;
  background-color: aliceblue;
  display:flex;
  }
  
  #left {
  flex-grow: 0;
  flex-basis: 300px;
  flex-shrink: 0;
  border: 1px solid black;
  }
  
  #right {
  flex-grow: 3;
  flex-basis: 70%;
  border: 1px solid red;
  }
  
  .red {
  background-color: red;
  top: 25px;
  left: 25px;
  z-index: 10;
  }
  
  .blue {
  background-color: blue;
  top:0;
  left:0;
  z-index: 20;
  }
  
  .text-box {
  border:1px solid black;
  padding:10px;
  width: 50px;
  height: 50px;
  position: absolute;
  }
  
  #hero-image {
  /* add background image to any block level element with the background-image CSS property. Its value is a URL to the image */
  /* If the image cannot fit the size of the element it is in, it will tile(i.e, repeat itself) */
  background-image:url(curry_puff.jpg);
  width:100vw;
  height: 320px;
  /* Cover:stretch the image to cover the element without compromising aspect ratio, even cropping if necessary */
  /* background-size: cover; */
  /* Contain: stretch the image to best fit the element while maintaining aspect ratio, tiling if necessary */
  /* background-size: contain; */
  }
  
  .translated {
    transform: translate(15px, 15px);
    background: 100px;
  }
  
  body {
  background-color: blue;
  }
  
  /* @media screen and (max-width:480px) { */
  /* css rules for devices from 0 to 480px */
  /* } */
  /* @media screen and (min-width:480px) { */
  /* css rules for devices larger than 480px */
  /* } */
  /* @media screen and (min-width:481px) and (max-width: 768px) { */
  /* css rules for devices between 481px to 768px */
  /* } */
  
  
  /* One could also set breakpoints for common device groups instead of specific devices.
  
  https://www.browserstack.com/guide/what-are-css-and-media-query-breakpoints
  */
  
  /* Extra small devices (phones, 600px and down) */
  @media only screen and (max-width: 600px) {
  /* css rules for devices from 0 to 600px */
    body {
    background-color: red;
    }
  }
  /* Small devices (portrait tablets and large phones, 600px and up) */
  @media only screen and (min-width: 600px) {
  /* css rules for devices larger than 600px */
  }
  /* Medium devices (landscape tablets, 768px and up) */
  @media only screen and (min-width: 768px) {
  /* css rules for devices larger than 768px */
  }
  /* Large devices (laptops/desktops, 992px and up) */
  @media only screen and (min-width: 992px) {
  /* css rules for devices larger than 992px */
  }
  /* Extra large devices (large laptops and desktops, 1200px and up) */
  @media only screen and (min-width: 1200px) {
  /* css rules for devices larger than 1200px */
  }